{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Store MongoDB The siddhi-store-mongodb extension is an extension to Siddhi that persist and retrieve events to/from MongoDB For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 3.0.0 . Features mongodb ( Store ) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Dependencies MongoDB connector jar and its dependencies should be added to the runtime (mongodb-java-driver-3.4.2, includes all the dependencies). For installing third party connectors on various Siddhi execution environments refer Siddhi documentation section on adding third party libraries . Installation For installing this extension on various Siddhi execution environments refer Siddhi documentation section on adding extensions . Running Integration tests in docker containers(Optional) The MongoDB functionality are tested with the docker base integration test framework. The test framework initializes the docker container according to the given profile before executing the test suite. Install and run docker in daemon mode. Installing docker on Linux, Note: These commands retrieve content from get.docker.com web in a quiet output-document mode and install.Then we need to stop docker service as it needs to restart docker in daemon mode. After that, we need to export docker daemon host. wget -qO- https://get.docker.com/ | sh sudo service dockerd stop export DOCKER_HOST=tcp://172.17.0.1:4326 docker daemon -H tcp://172.17.0.1:4326 On installing docker on Mac, see Get started with Docker for Mac On installing docker on Windows, see Get started with Docker for Windows To run the integration tests, issue the following commands. MongoDB 3.4 without SSL connection mvn verify -P mongod -Ddocker.removeVolumes=true MongoDB 3.4 with SSL connection mvn verify -P mongod-ssl -Ddocker.removeVolumes=true MongoDB 4.2 mvn verify -P mongod4 -Ddocker.removeVolumes=true Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-store-mongodb","text":"The siddhi-store-mongodb extension is an extension to Siddhi that persist and retrieve events to/from MongoDB For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Store MongoDB"},{"location":"#download","text":"Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 3.0.0 .","title":"Latest API Docs"},{"location":"#features","text":"mongodb ( Store ) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice.","title":"Features"},{"location":"#dependencies","text":"MongoDB connector jar and its dependencies should be added to the runtime (mongodb-java-driver-3.4.2, includes all the dependencies). For installing third party connectors on various Siddhi execution environments refer Siddhi documentation section on adding third party libraries .","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various Siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#running-integration-tests-in-docker-containersoptional","text":"The MongoDB functionality are tested with the docker base integration test framework. The test framework initializes the docker container according to the given profile before executing the test suite. Install and run docker in daemon mode. Installing docker on Linux, Note: These commands retrieve content from get.docker.com web in a quiet output-document mode and install.Then we need to stop docker service as it needs to restart docker in daemon mode. After that, we need to export docker daemon host. wget -qO- https://get.docker.com/ | sh sudo service dockerd stop export DOCKER_HOST=tcp://172.17.0.1:4326 docker daemon -H tcp://172.17.0.1:4326 On installing docker on Mac, see Get started with Docker for Mac On installing docker on Windows, see Get started with Docker for Windows To run the integration tests, issue the following commands. MongoDB 3.4 without SSL connection mvn verify -P mongod -Ddocker.removeVolumes=true MongoDB 3.4 with SSL connection mvn verify -P mongod-ssl -Ddocker.removeVolumes=true MongoDB 4.2 mvn verify -P mongod4 -Ddocker.removeVolumes=true","title":"Running Integration tests in docker containers(Optional)"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#store","text":"","title":"Store"},{"location":"api/1.0.10/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.11/","text":"API Docs - v1.0.11 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.11"},{"location":"api/1.0.11/#api-docs-v1011","text":"","title":"API Docs - v1.0.11"},{"location":"api/1.0.11/#store","text":"","title":"Store"},{"location":"api/1.0.11/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.12/","text":"API Docs - v1.0.12 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.12"},{"location":"api/1.0.12/#api-docs-v1012","text":"","title":"API Docs - v1.0.12"},{"location":"api/1.0.12/#store","text":"","title":"Store"},{"location":"api/1.0.12/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.13/","text":"API Docs - v1.0.13 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.13"},{"location":"api/1.0.13/#api-docs-v1013","text":"","title":"API Docs - v1.0.13"},{"location":"api/1.0.13/#store","text":"","title":"Store"},{"location":"api/1.0.13/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.14/","text":"API Docs - v1.0.14 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.14"},{"location":"api/1.0.14/#api-docs-v1014","text":"","title":"API Docs - v1.0.14"},{"location":"api/1.0.14/#store","text":"","title":"Store"},{"location":"api/1.0.14/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.15/","text":"API Docs - v1.0.15 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.15"},{"location":"api/1.0.15/#api-docs-v1015","text":"","title":"API Docs - v1.0.15"},{"location":"api/1.0.15/#store","text":"","title":"Store"},{"location":"api/1.0.15/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.16/","text":"API Docs - v1.0.16 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.16"},{"location":"api/1.0.16/#api-docs-v1016","text":"","title":"API Docs - v1.0.16"},{"location":"api/1.0.16/#store","text":"","title":"Store"},{"location":"api/1.0.16/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.17/","text":"API Docs - v1.0.17 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.17"},{"location":"api/1.0.17/#api-docs-v1017","text":"","title":"API Docs - v1.0.17"},{"location":"api/1.0.17/#store","text":"","title":"Store"},{"location":"api/1.0.17/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.18/","text":"API Docs - v1.0.18 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.18"},{"location":"api/1.0.18/#api-docs-v1018","text":"","title":"API Docs - v1.0.18"},{"location":"api/1.0.18/#store","text":"","title":"Store"},{"location":"api/1.0.18/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.19/","text":"API Docs - v1.0.19 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.19"},{"location":"api/1.0.19/#api-docs-v1019","text":"","title":"API Docs - v1.0.19"},{"location":"api/1.0.19/#store","text":"","title":"Store"},{"location":"api/1.0.19/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.20/","text":"API Docs - v1.0.20 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.20"},{"location":"api/1.0.20/#api-docs-v1020","text":"","title":"API Docs - v1.0.20"},{"location":"api/1.0.20/#store","text":"","title":"Store"},{"location":"api/1.0.20/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.21/","text":"API Docs - v1.0.21 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.21"},{"location":"api/1.0.21/#api-docs-v1021","text":"","title":"API Docs - v1.0.21"},{"location":"api/1.0.21/#store","text":"","title":"Store"},{"location":"api/1.0.21/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#store","text":"","title":"Store"},{"location":"api/1.0.7/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#store","text":"","title":"Store"},{"location":"api/1.0.8/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.0.9/","text":"API Docs - v1.0.9 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.0.9"},{"location":"api/1.0.9/#api-docs-v109","text":"","title":"API Docs - v1.0.9"},{"location":"api/1.0.9/#store","text":"","title":"Store"},{"location":"api/1.0.9/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#store","text":"","title":"Store"},{"location":"api/1.1.0/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#store","text":"","title":"Store"},{"location":"api/2.0.0/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/2.0.1/","text":"API Docs - v2.0.1 Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"2.0.1"},{"location":"api/2.0.1/#api-docs-v201","text":"Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.1"},{"location":"api/2.0.1/#store","text":"","title":"Store"},{"location":"api/2.0.1/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, ? FieldName SortOrder IndexOptions ? SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : ?symbol 1 {?unique?:true}?","title":"mongodb (Store)"},{"location":"api/2.0.2/","text":"API Docs - v2.0.2 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, \u201c FieldName SortOrder IndexOptions \u201d SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : \u201csymbol 1 {\u201cunique\u201d:true}\u201d","title":"2.0.2"},{"location":"api/2.0.2/#api-docs-v202","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.2"},{"location":"api/2.0.2/#store","text":"","title":"Store"},{"location":"api/2.0.2/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @IndexBy( volume 1 {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongod level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @IndexBy: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, \u201c FieldName SortOrder IndexOptions \u201d SortOrder - ( 1) for Ascending and (-1) for Descending IndexOptions - Index Options must be defined inside curly brackets. {} to be used for default options. Options must follow the standard mongodb index options format. Reference : https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example : \u201csymbol 1 {\u201cunique\u201d:true}\u201d","title":"mongodb (Store)"},{"location":"api/2.0.3/","text":"API Docs - v2.0.3 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"2.0.3"},{"location":"api/2.0.3/#api-docs-v203","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.3"},{"location":"api/2.0.3/#store","text":"","title":"Store"},{"location":"api/2.0.3/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"mongodb (Store)"},{"location":"api/2.1.0/","text":"API Docs - v2.1.0 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"2.1.0"},{"location":"api/2.1.0/#api-docs-v210","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.1.0"},{"location":"api/2.1.0/#store","text":"","title":"Store"},{"location":"api/2.1.0/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"mongodb (Store)"},{"location":"api/2.1.1/","text":"API Docs - v2.1.1 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"2.1.1"},{"location":"api/2.1.1/#api-docs-v211","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.1.1"},{"location":"api/2.1.1/#store","text":"","title":"Store"},{"location":"api/2.1.1/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"mongodb (Store)"},{"location":"api/2.1.2/","text":"API Docs - v2.1.2 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"2.1.2"},{"location":"api/2.1.2/#api-docs-v212","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.1.2"},{"location":"api/2.1.2/#store","text":"","title":"Store"},{"location":"api/2.1.2/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"mongodb (Store)"},{"location":"api/2.1.4/","text":"API Docs - v2.1.4 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"2.1.4"},{"location":"api/2.1.4/#api-docs-v214","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.1.4"},{"location":"api/2.1.4/#store","text":"","title":"Store"},{"location":"api/2.1.4/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. cursorFinalizerEnabled Sets whether cursor finalizers are enabled. true true false requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer threadsAllowedToBlockForConnectionMultiplier The maximum number of connections allowed per host for this MongoClient instance. Those connections will be kept in a pool when idle. Once the pool is exhausted, any operation requiring a connection will block waiting for an available connection. 100 Any natural number maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketKeepAlive Sets whether to keep a connection alive through firewalls false true false socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatSocketTimeout The socket timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatConnectTimeout The connect timeout for connections used for the cluster heartbeat. A value of 0 means that it will timeout immediately if no cluster member is available. A negative value means to wait indefinitely. 20000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"mongodb (Store)"},{"location":"api/2.1.5/","text":"API Docs - v2.1.5 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"2.1.5"},{"location":"api/2.1.5/#api-docs-v215","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.1.5"},{"location":"api/2.1.5/#store","text":"","title":"Store"},{"location":"api/2.1.5/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"mongodb (Store)"},{"location":"api/3.0.0/","text":"API Docs - v3.0.0 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"3.0.0"},{"location":"api/3.0.0/#api-docs-v300","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.0"},{"location":"api/3.0.0/#store","text":"","title":"Store"},{"location":"api/3.0.0/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"mongodb (Store)"},{"location":"api/latest/","text":"API Docs - v3.0.0 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Store mongodb (Store) Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"latest"},{"location":"api/latest/#api-docs-v300","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v3.0.0"},{"location":"api/latest/#store","text":"","title":"Store"},{"location":"api/latest/#mongodb-store","text":"Using this extension a MongoDB Event Table can be configured to persist events in a MongoDB of user's choice. Syntax @Store(type= mongodb , mongodb.uri= STRING , collection.name= STRING , secure.connection= STRING , trust.store= STRING , trust.store.password= STRING , key.store= STRING , key.store.password= STRING ) @PrimaryKey( PRIMARY_KEY ) @Index( INDEX ) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic mongodb.uri The MongoDB URI for the MongoDB data store. The uri must be of the format mongodb://[username:password@]host1[:port1][,hostN[:portN]][/[database][?options]] The options specified in the uri will override any connection options specified in the deployment yaml file. Note: The user should have read permissions to the admindb as well as read/write permissions to the database accessed. STRING No No collection.name The name of the collection in the store this Event Table should be persisted as. Name of the siddhi event table. STRING Yes No secure.connection Describes enabling the SSL for the mongodb connection false STRING Yes No trust.store File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No trust.store.password Password to access the trust store wso2carbon STRING Yes No key.store File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No key.store.password Password to access the keystore wso2carbon STRING Yes No System Parameters Name Description Default Value Possible Parameters applicationName Sets the logical name of the application using this MongoClient. The application name may be used by the client to identify the application to the server, for use in server logs, slow query logs, and profile collection. null the logical name of the application using this MongoClient. The UTF-8 encoding may not exceed 128 bytes. requiredReplicaSetName The name of the replica set null the logical name of the replica set sslEnabled Sets whether to initiate connection with TSL/SSL enabled. true: Initiate the connection with TLS/SSL. false: Initiate the connection without TLS/SSL. false true false encryptionProtocol Encryption protocol. TLSv1.3 SSL TLSv1.2 TLSv1.3 trustStore File path to the trust store. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. trustStorePassword Password to access the trust store wso2carbon Any valid password. keyStore File path to the keystore. ${carbon.home}/resources/security/client-truststore.jks Any valid file path. keyStorePassword Password to access the keystore wso2carbon Any valid password. connectTimeout The time in milliseconds to attempt a connection before timing out. 10000 Any positive integer connectionsPerHost The maximum number of connections in the connection pool. 100 Any positive integer minConnectionsPerHost The minimum number of connections in the connection pool. 0 Any natural number maxConnectionIdleTime The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. A zero value indicates no limit to the idle time. A pooled connection that has exceeded its idle time will be closed and replaced when necessary by a new connection. 0 Any positive integer maxWaitTime The maximum wait time in milliseconds that a thread may wait for a connection to become available. A value of 0 means that it will not wait. A negative value means to wait indefinitely 120000 Any integer maxConnectionLifeTime The maximum life time of a pooled connection. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection. 0 Any positive integer socketTimeout The time in milliseconds to attempt a send or receive on a socket before the attempt times out. Default 0 means never to timeout. 0 Any natural integer writeConcern The write concern to use. acknowledged acknowledged w1 w2 w3 unacknowledged fsynced journaled replica_acknowledged normal safe majority fsync_safe journal_safe replicas_safe readConcern The level of isolation for the reads from replica sets. default local majority linearizable readPreference Specifies the replica set read preference for the connection. primary primary secondary secondarypreferred primarypreferred nearest localThreshold The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. 15 Any natural number serverSelectionTimeout Specifies how long (in milliseconds) to block for server selection before throwing an exception. A value of 0 means that it will timeout immediately if no server is available. A negative value means to wait indefinitely. 30000 Any integer heartbeatFrequency Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. 10000 Any positive integer minHeartbeatFrequency Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. 500 Any positive integer Examples EXAMPLE 1 @Store(type= mongodb ,mongodb.uri= mongodb://admin:admin@localhost/Foo ) @PrimaryKey( symbol ) @Index( volume:1 , {background:true,unique:true} ) define table FooTable (symbol string, price float, volume long); This will create a collection called FooTable for the events to be saved with symbol as Primary Key(unique index at mongoDB level) and index for the field volume will be created in ascending order with the index option to create the index in the background. Note: @PrimaryKey: This specifies a list of comma-separated values to be treated as unique fields in the table. Each record in the table must have a unique combination of values for the fields specified here. @Index: This specifies the fields that must be indexed at the database level. You can specify multiple values as a come-separated list. A single value to be in the format, FieldName : SortOrder . The last element is optional through which a valid index options can be passed. SortOrder : 1 for Ascending & -1 for Descending. Optional, with default value as 1. IndexOptions : Index Options must be defined inside curly brackets. Options must follow the standard mongodb index options format. https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/ Example 1: @Index( 'symbol:1' , '{\"unique\":true}' ) Example 2: @Index( 'symbol' , '{\"unique\":true}' ) Example 3: @Index( 'symbol:1' , 'volume:-1' , '{\"unique\":true}' )","title":"mongodb (Store)"}]}